def patternMatcher(pattern, string):
    # Write your code here.
	if len(pattern)>len(string):
		return []
	newpattern=getnewpattern(pattern)
	didswitch=newpattern[0]!=pattern[0]
	counts={'x':0,'y':0}
	firstypos=getcountsandfirstypos(newpattern,counts)
	if counts["y"]!=0:
		for lenofx in range(1,len(string)):
			lenofy=(len(string)-lenofx* counts["x"])/counts["y"]
			if lenofy<=0 or lenofy %1 !=0:
				continue
			lenofy=int(lenofy)
			yidx=firstypos*lenofx
			x=string[:lenofx]
			y=string[yidx:yidx+lenofy]
			potentialmatch=map(lambda char: x if char== "x" else y,newpattern)
			if string =="".join(potentialmatch):
				return [x,y] if not didswitch else[y,x]
	else:
		lenofx=len(string)/counts["x"]
		if lenofx %1==0:
			lenofx =int(lenofx)
			x=string[:lenofx]
			potentialmatch=map(lambda char:x,newpattern)
			if string =="".join(potentialmatch):
				return[x,""] if not didswitch else ["",x]
	return []

def getnewpattern(pattern):
	patternletters= list(pattern)
	if pattern[0]=="x":
		return patternletters
	else:
		return list(map(lambda char:"x" if char=="y" else "y",patternletters))
	
def getcountsandfirstypos(pattern,counts):
	firstypos=None
	for i, char in enumerate(pattern):
		counts[char]+=1
		if char=="y" and firstypos is None:
			firstypos=i
	return firstypos
